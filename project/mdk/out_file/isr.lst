C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\out_file\isr.obj
COMPILER INVOKED BY: D:\C251\C251\BIN\C251.EXE ..\user\isr.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(2,SIZE) BROW
                    -SE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driver;..
                    -\user;..\code) DEBUG PRINT(.\out_file\isr.lst) TABS(2) OBJECT(.\out_file\isr.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2          * AI8051U Opensourec Library 即（AI8051U 开源库）是一个基于官方 SDK 接口的第三方开源库
    3          * Copyright (c) 2022 SEEKFREE 逐飞科技
    4          *
    5          * 本文件是STC 开源库的一部分
    6          *
    7          * AI8051U 开源库 是免费软件
    8          * 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
    9          * 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
   10          *
   11          * 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
   12          * 甚至没有隐含的适销性或适合特定用途的保证
   13          * 更多细节请参见 GPL
   14          *
   15          * 您应该在收到本开源库的同时收到一份 GPL 的副本
   16          * 如果没有，请参阅<https://www.gnu.org/licenses/>
   17          *
   18          * 额外注明：
   19          * 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
   20          * 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
   21          * 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
   22          * 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
   23          *
   24          * 文件名称          
   25          * 公司名称          成都逐飞科技有限公司
   26          * 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
   27          * 开发环境          MDK FOR C251
   28          * 适用平台          AI8051U
   29          * 店铺链接          https://seekfree.taobao.com/
   30          *
   31          * 修改记录
   32          * 日期              作者           备注
   33          * 2024-08-01        大W            first version
   34          *********************************************************************************************************
             -***********/
   35          #include "isr.h"
   36          
   37          void DMA_UART1_IRQHandler (void) interrupt 4
   38          {
   39   1          static vuint8 dwon_count = 0;
   40   1          if (DMA_UR1R_STA & 0x01)    // 接收完成
   41   1          {
   42   2              DMA_UR1R_STA &= ~0x01;    // 清标志位
   43   2              uart_rx_start_buff(UART_1); // 设置下一次接收，务必保留
   44   2              
   45   2              //程序自动下载
   46   2              if(uart_rx_buff[UART_1][0] == 0x7F)
   47   2              {
   48   3                  if(dwon_count++ > 20)
   49   3                  {
   50   4                      IAP_CONTR = 0x60;
   51   4                  }
   52   3              }
   53   2              else
   54   2              {
   55   3                  dwon_count = 0;
C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 2   

   56   3              }
   57   2              
   58   2              if(uart1_irq_handler != NULL)
   59   2              {
   60   3                  uart1_irq_handler(uart_rx_buff[UART_1][0]);
   61   3              }
   62   2          }
   63   1          
   64   1          if (DMA_UR1R_STA & 0x02)  //数据丢弃
   65   1          {
   66   2              DMA_UR1R_STA &= ~0x02;  //清标志位
   67   2              uart_rx_start_buff(UART_1); // 设置下一次接收，务必保留
   68   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   69   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   70   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   71   2          }
   72   1      }
   73          
   74          
   75          
   76          void DMA_UART2_IRQHandler (void) interrupt 8
   77          {
   78   1      
   79   1          if (DMA_UR2R_STA & 0x01)    // 接收完成
   80   1          {
   81   2              DMA_UR2R_STA &= ~0x01;    // 清标志位
   82   2              uart_rx_start_buff(UART_2); // 设置下一次接收，务必保留
   83   2              
   84   2              if(uart2_irq_handler != NULL)
   85   2              {
   86   3                  uart2_irq_handler(uart_rx_buff[UART_2][0]);
   87   3              }
   88   2          }
   89   1          
   90   1          if (DMA_UR2R_STA & 0x02)    //数据丢弃
   91   1          {
   92   2              DMA_UR2R_STA &= ~0x02;    //清标志位
   93   2              uart_rx_start_buff(UART_2); // 设置下一次接收，务必保留
   94   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   95   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   96   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   97   2              
   98   2          }
   99   1      }
  100          
  101          void DMA_UART3_IRQHandler (void) interrupt 17
  102          {
  103   1      
  104   1          if (DMA_UR3R_STA & 0x01)    // 接收完成
  105   1          {
  106   2              DMA_UR3R_STA &= ~0x01;    // 清标志位
  107   2              uart_rx_start_buff(UART_3); // 设置下一次接收，务必保留
  108   2              
  109   2              if(uart3_irq_handler != NULL)
  110   2              {
  111   3              
  112   3                  uart3_irq_handler(uart_rx_buff[UART_3][0]);
  113   3                  
  114   3              }
  115   2          }
  116   1          
  117   1          if (DMA_UR3R_STA & 0x02)    //数据丢弃
  118   1          {
  119   2              DMA_UR3R_STA &= ~0x02;    //清标志位
  120   2              uart_rx_start_buff(UART_3); // 设置下一次接收，务必保留
  121   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 3   

  122   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  123   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  124   2              
  125   2          }
  126   1      }
  127          
  128          void DMA_UART4_IRQHandler (void) interrupt 18
  129          {
  130   1      
  131   1          if (DMA_UR4R_STA & 0x01)    // 接收完成
  132   1          {
  133   2              DMA_UR4R_STA &= ~0x01;    // 清标志位
  134   2              uart_rx_start_buff(UART_4); // 设置下一次接收，务必保留
  135   2              
  136   2              if(uart4_irq_handler != NULL)
  137   2              {
  138   3                  uart4_irq_handler(uart_rx_buff[UART_4][0]);
  139   3                  
  140   3              }
  141   2          }
  142   1          
  143   1          if (DMA_UR4R_STA & 0x02)  //数据丢弃
  144   1          {
  145   2              DMA_UR4R_STA &= ~0x02;  //清标志位
  146   2              uart_rx_start_buff(UART_4); // 设置下一次接收，务必保留
  147   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  148   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  149   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  150   2              
  151   2          }
  152   1      }
  153          
  154          
  155          void TM0_IRQHandler() interrupt 1
  156          {
  157   1          TIM0_CLEAR_FLAG;
  158   1          
  159   1          if(tim0_irq_handler != NULL)
  160   1          {
  161   2              tim0_irq_handler();
  162   2          }
  163   1      }
  164          void TM1_IRQHandler() interrupt 3
  165          {
  166   1          TIM1_CLEAR_FLAG;
  167   1          
  168   1          if(tim1_irq_handler != NULL)
  169   1          {
  170   2              tim1_irq_handler();
  171   2          }
  172   1      }
  173          void TM2_IRQHandler() interrupt 12
  174          {
  175   1          TIM2_CLEAR_FLAG;
  176   1          
  177   1          if(tim2_irq_handler != NULL)
  178   1          {
  179   2              tim2_irq_handler();
  180   2          }
  181   1      }
  182          void TM3_IRQHandler() interrupt 19
  183          {
  184   1          TIM3_CLEAR_FLAG;
  185   1          
  186   1          if(tim3_irq_handler != NULL)
  187   1          {
C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 4   

  188   2              tim3_irq_handler();
  189   2          }
  190   1      }
  191          
  192          void TM4_IRQHandler() interrupt 20
  193          {
  194   1          TIM4_CLEAR_FLAG;
  195   1          
  196   1          if(tim4_irq_handler != NULL)
  197   1          {
  198   2              tim4_irq_handler();
  199   2          }
  200   1      }
  201          
  202          void TM11_IRQHandler() interrupt 24
  203          {
  204   1          TIM11_CLEAR_FLAG;
  205   1          
  206   1          if(tim11_irq_handler != NULL)
  207   1          {
  208   2              tim11_irq_handler();
  209   2          }
  210   1      }
  211          
  212          /**
  213            * @brief TIM0中断处理函数，提取imu数据
  214            * @param 无
  215            * @return 无
  216            */
  217          void pit_hanlder_imu(void)
  218          {
  219   1          imu660ra_get_acc();  // 获取 IMU660RA 的加速度测量数值
  220   1          imu660ra_get_gyro(); // 获取 IMU660RA 的角速度测量数值
  221   1          
  222   1          //转换为实际物理值
  223   1          imu_acc[0]=imu660ra_acc_x/imu660ra_transition_factor[0];
  224   1          imu_acc[1]=imu660ra_acc_y/imu660ra_transition_factor[0];
  225   1          imu_acc[2]=imu660ra_acc_z/imu660ra_transition_factor[0];
  226   1        
  227   1          imu_gyro[0]=imu660ra_gyro_x/imu660ra_transition_factor[1];
  228   1          imu_gyro[1]=imu660ra_gyro_y/imu660ra_transition_factor[1];
  229   1          imu_gyro[2]=imu660ra_gyro_z/imu660ra_transition_factor[1]; 
  230   1      }
  231          /**
  232            * @brief TIM1中断处理函数，提取gps数据
  233            * @param 无
  234            * @return 无
  235            */
  236          void pit_hanlder_gps(void)
  237          {
  238   1          //获取gps数据
  239   1          if(gps_tau1201_flag)
  240   1          {
  241   2            gps_tau1201_flag = 0;
  242   2            gps_date_ready = (!gps_data_parse()) ? 1 : 0;
  243   2          }
  244   1          else gps_date_ready = 0;
  245   1      }
  246          
  247          void my_pit_init()
  248          {
  249   1          //设置中断回调函数 5ms采样一次IMU数据
  250   1          tim0_irq_handler = pit_hanlder_imu; 
  251   1          pit_ms_init(PIT_IMU, 5);
  252   1          //设置中断回调函数 1s采样一次GPS数据
  253   1          tim1_irq_handler = pit_hanlder_GPS; 
C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 5   

  254   1          pit_ms_init(PIT_GPS, 1000);
  255   1      }
  256          
  257          
  258          //#define     INT0_VECTOR             0       //0003H
  259          //#define     TMR0_VECTOR             1       //000BH
  260          //#define     INT1_VECTOR             2       //0013H
  261          //#define     TMR1_VECTOR             3       //001BH
  262          //#define     UART1_VECTOR            4       //0023H
  263          //#define     ADC_VECTOR              5       //002BH
  264          //#define     LVD_VECTOR              6       //0033H
  265          //#define     PCA_VECTOR              7       //003BH
  266          //#define     UART2_VECTOR            8       //0043H
  267          //#define     SPI_VECTOR              9       //004BH
  268          //#define     INT2_VECTOR             10      //0053H
  269          //#define     INT3_VECTOR             11      //005BH
  270          //#define     TMR2_VECTOR             12      //0063H
  271          //#define     USER_VECTOR             13      //006BH
  272          //#define     INT4_VECTOR             16      //0083H
  273          //#define     UART3_VECTOR            17      //008BH
  274          //#define     UART4_VECTOR            18      //0093H
  275          //#define     TMR3_VECTOR             19      //009BH
  276          //#define     TMR4_VECTOR             20      //00A3H
  277          //#define     CMP_VECTOR              21      //00ABH
  278          //#define     I2C_VECTOR              24      //00C3H
  279          //#define     USB_VECTOR              25      //00CBH
  280          //#define     PWMA_VECTOR             26      //00D3H
  281          //#define     PWMB_VECTOR             27      //00DBH
  282          
  283          //#define     RTC_VECTOR              36      //0123H
  284          //#define     P0INT_VECTOR            37      //012BH
  285          //#define     P1INT_VECTOR            38      //0133H
  286          //#define     P2INT_VECTOR            39      //013BH
  287          //#define     P3INT_VECTOR            40      //0143H
  288          //#define     P4INT_VECTOR            41      //014BH
  289          //#define     P5INT_VECTOR            42      //0153H
  290          //#define     P6INT_VECTOR            43      //015BH
  291          //#define     P7INT_VECTOR            44      //0163H
  292          //#define     DMA_M2M_VECTOR          47      //017BH
  293          //#define     DMA_ADC_VECTOR          48      //0183H
  294          //#define     DMA_SPI_VECTOR          49      //018BH
  295          //#define     DMA_UR1T_VECTOR         50      //0193H
  296          //#define     DMA_UR1R_VECTOR         51      //019BH
  297          //#define     DMA_UR2T_VECTOR         52      //01A3H
  298          //#define     DMA_UR2R_VECTOR         53      //01ABH
  299          //#define     DMA_UR3T_VECTOR         54      //01B3H
  300          //#define     DMA_UR3R_VECTOR         55      //01BBH
  301          //#define     DMA_UR4T_VECTOR         56      //01C3H
  302          //#define     DMA_UR4R_VECTOR         57      //01CBH
  303          //#define     DMA_LCM_VECTOR          58      //01D3H
  304          //#define     LCM_VECTOR              59      //01DBH
  305          //#define     DMA_I2CT_VECTOR         60      //01E3H
  306          //#define     DMA_I2CR_VECTOR         61      //01EBH
  307          //#define     I2S_VECTOR              62      //01F3H
  308          //#define     DMA_I2ST_VECTOR         63      //01FBH
  309          //#define     DMA_I2SR_VECTOR         64      //0203H
  310          //#define     DMA_QSPI_VECTOR         65      //020BH
  311          //#define     QSPI_VECTOR             66      //0213H
  312          //#define     TMR11_VECTOR            67      //021BH
  313          //#define     DMA_PWMAT_VECTOR        72      //0243H
  314          //#define     DMA_PWMAR_VECTOR        73      //024BH


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1322     ------
  ecode size           =    ------     ------
C251 COMPILER V5.60.0,  isr                                                                29/03/25  00:53:11  PAGE 6   

  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         1     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
